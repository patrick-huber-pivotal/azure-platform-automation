credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    CREDHUB_CA_CERT: ((credhub-ca-cert))
    PREFIX: '/concourse/main'
    INTERPOLATION_PATHS: "vars config"
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: configuration

prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  params:
    VARS_PATHS: vars/vars
    CONFIG_PATHS: config/config
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  output_mapping:
    tasks: platform-automation-tasks

resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: schedule
  type: time
  source: 
    interval: 24h

- name: configuration
  type: git
  source:
    private_key: ((git_private_key.private_key))
    uri: ((source-repo))
    branch: master
    submodules: all
    depth: 1

- name: healthwatch-product
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: \[p-healthwatch,(.*)\:p-healthwatch-.*.pivotal

- name: healthwatch-stemcell
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure-hyperv.*\.tgz

- name: opsman-product
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: \[ops-manager,(.*)\].*.ova

- name: pas-product
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: \[elastic-runtime,(.*)\]cf-.*.pivotal

- name: pas-stemcell
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure-hyperv.*\.tgz

- name: pks-product
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: \[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal

- name: pks-stemcell
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: pks-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure-hyperv.*\.tgz

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 4\.3\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: azure-blobstore
  source:
    storage_account_key: ((storage_account_key))
    container: ((container))
    storage_account_name: ((storage_account_name))
    regexp: platform-automation-image-(.*).tgz

jobs:
- name: fetch-healthwatch
  plan: 
  - in_parallel:
    - get: schedule
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-product-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: vars/products/p-healthwatch.yml 
    input_mapping:
      config: configuration
  - in_parallel: 
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: downloaded-stemcell/*.tgz

- name: fetch-opsman
  plan:
  - in_parallel:
    - get: schedule
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: vars/products/opsman.yml
    input_mapping:
      config: configuration
  - in_parallel:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pas
  plan:
  - in_parallel:
    - get: schedule
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: vars/products/cf.yml
    input_mapping:
      config: configuration
  - in_parallel:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: downloaded-stemcell/*.tgz

- name: fetch-pks
  plan:
  - in_parallel:
      - get: schedule
        trigger: true
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product/pks.yml
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - in_parallel:
      - put: pks-product
        params:
          file: downloaded-product/*.pivotal
      - put: pks-stemcell
        params:
          file: pks-stemcell/*.tgz

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
